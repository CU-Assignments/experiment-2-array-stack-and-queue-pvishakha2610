1.Given an array of integers nums and an integer target, return the indices of
the two numbers such that they add up to target. Each input has exactly one solution,
and you cannot use the same element twice. 
class Solution {
public static int[] twoSum(int[] nums, int target) {
int[] arr = new int[2];
for (int i = 0; i < nums.length - 1; i++) {
for (int j = i + 1; j < nums.length; j++) {
if (nums[i] + nums[j] == target) {
arr[0] = i;
arr[1] = j;
return arr;
}
}
}
return arr;
}
public static void main(String[] args) {
Solution solution = new Solution();
int[] nums = {2, 7, 11, 15};
int target = 9;
int[] result = solution.twoSum(nums, target);
System.out.println("[" + result[0] + ", " + result[1] + "]"); // 
}
}

2.You are given a 0-indexed array of integers nums of length n. You are initially positioned
at nums[0].Each element nums[i] represents the maximum length of a forward jump from
index i.
class Solution {
public int jump(int[] nums) {
int jumps = 0, currentEnd = 0, farthest = 0;
for (int i = 0; i < nums.length - 1; i++) {
farthest = Math.max(farthest, i + nums[i]);
if (i == currentEnd) {
jumps++;
currentEnd = farthest;
}
}
return jumps;
}
public static void main(String[] args) {
Solution solution = new Solution();
System.out.println(solution.jump(new int[]{2, 3, 1, 1, 4}));
System.out.println(solution.jump(new int[]{2, 3, 0, 1, 4}));
}
}

